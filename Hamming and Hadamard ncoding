##Hamming code (7,4) 

import numpy as np
import matplotlib.pyplot as plt
from numpy.lib.shape_base import split
from numpy.random import uniform as uniform 
import pandas as pd
#Hamming code encoding#

##Generator matrix##

G = [[1,0,0,0,0,1,1],[0,1,0,0,1,0,1],[0,0,1,0,1,1,0],[0,0,0,1,1,1,1]]

## 16 possible permuations from 4 bits
flist = [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 1], [0, 1, 0, 0], 
[0, 1, 0, 1], [0, 1, 1, 0], [0, 1, 1, 1], [1, 0, 0, 0], [1, 0, 0, 1], [1, 0, 1, 0], 
[1, 0, 1, 1], [1, 1, 0, 0], [1, 1, 0, 1], [1, 1, 1, 0], [1, 1, 1, 1]]

##Function for hamming code##
def hamming_encoding(list_4bits, gen_matrix):
    codewords = np.zeros([16,7])
    for i in range(len(list_4bits)):
        codewords[i] = np.array(np.matmul(list_4bits[i],gen_matrix)%2)
    return codewords.astype(int)

def split_codewords(codewords):
    first_4 = np.zeros([16,4])
    last_3 = np.zeros([16,3])
    for i in range(len(codewords)):
        first_4[i] = codewords[i][:4]
        last_3[i] =codewords[i][4:]
    return first_4.astype(int), last_3.astype(int)

def corrupt_binary(blist, p):
    new_binary=[]
    for j in blist:
        new_byte = []
        for n in j:
            if uniform(0,1) < p: 
                new_byte.append(1-n)
            else: 
                new_byte.append(n)
        new_binary.append(new_byte)
    return np.array(new_binary)

##The hamming distance between one element of a list 1 to the whole list 2
def hamming_dist(input1,input2):
    dist = []
    for i in range(len(input2)):
        ham_dist = abs(input1 - input2[i])
        dist.append(np.sum(ham_dist))
    return dist

def corrupt_codewords(codewords,p):
    first_4 = split_codewords(codewords)[0]
    last_3 = split_codewords(codewords)[1]
    corpt_codewords = np.concatenate((corrupt_binary(first_4,p),last_3),axis=1)
    return corpt_codewords

## Hamming decoding to get a seven-bit codeword, and the first of four bits will be used to compare with the corrupted list of 4 bits without encoding: 

def hamming_decoding(codewords,p):
    corpt_codewords = corrupt_codewords(codewords,p)
    dist = []
    min_indexes = []
    for i in range(len(corpt_codewords)):
        x = corpt_codewords[i]
        dist.append(hamming_dist(x,codewords))
        min_indexes.append(np.argmin(dist[i]))
    new_codewords = np.array(codewords[[i for i in min_indexes]])
    decode_fourbits = np.array(split_codewords(new_codewords)[0])
    return np.array(decode_fourbits)

## Find the number of errors when comparing the decoded codewords with the corrupted codewords without encoding
def compare_dist(decodewords,corrupt_code):
    dist = []
    (num,dim) = decodewords.shape
    for index in range(num):
            ham_dist = abs(decodewords[index] - corrupt_code[index])
            dist.append(np.sum(ham_dist))
    return dist


def density_error(diff):
    remove_rep = []
    density_list = []
    [remove_rep.append(i) for i in diff if i not in remove_rep]
    ##order a list of numbers from small to large
    remove_rep.sort()

    for i in remove_rep: 
        density_list.append(np.count_nonzero(diff == i, axis = 0))
        ## Already sort according to the above list
    return density_list, remove_rep

p = float(input("Input probability: "))

codewords = hamming_encoding(flist,G)

decodewords = hamming_decoding(codewords,p)


corrupt_code = corrupt_binary(flist,p)

dist = compare_dist(decodewords,corrupt_code)

density_list, remove_rep = density_error(dist)
# print(dist)

## Make a table data
dic = {0: "No", 1: "Single", 2: "Double", 3: "Triple", 4 : "Quadruple", 5 : "Quintuple", 6 : "Sextuple", 7 : "Septuple", 8 : "Octuple" }
rows = []
for index in remove_rep:
    rows = rows +  [dic[index] + ' Error']

table = pd.DataFrame(density_list, index = rows, columns=["Numbers"])
print(table)

# Plot the histogram graphs 
plt.hist(dist,  bins = 10,alpha = 0.7, color="blue", ec = "black")
plt.xlabel("Number of errors")
plt.ylabel("Density")
plt.xticks(dist) 

plt.savefig('hc74with'+str(p)+'.png')
plt.show()


## Another linear code: Hadamard Code:

np.set_printoptions(threshold=np.inf)

tern_list = np.array( [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 2], [0, 0, 1, 0], [0, 0, 1, 1], [0, 0, 1, 2], [0, 0, 2, 0], [0, 0, 2, 1], [0, 0, 2, 2], [0, 1, 0, 0], [0, 1, 0, 1], 
[0, 1, 0, 2], [0, 1, 1, 0], [0, 1, 1, 1], [0, 1, 1, 2], [0, 1, 2, 0], [0, 1, 2, 1], [0, 1, 2, 2], [0, 2, 0, 0], [0, 2, 0, 1], [0, 2, 0, 2], [0, 2, 1, 0], [0, 2, 1, 1], 
[0, 2, 1, 2], [0, 2, 2, 0], [0, 2, 2, 1], [0, 2, 2, 2], [1, 0, 0, 0], [1, 0, 0, 1], [1, 0, 0, 2], [1, 0, 1, 0], [1, 0, 1, 1], [1, 0, 1, 2], [1, 0, 2, 0], [1, 0, 2, 1], 
[1, 0, 2, 2], [1, 1, 0, 0], [1, 1, 0, 1], [1, 1, 0, 2], [1, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 2], [1, 1, 2, 0], [1, 1, 2, 1], [1, 1, 2, 2], [1, 2, 0, 0], [1, 2, 0, 1], 
[1, 2, 0, 2], [1, 2, 1, 0], [1, 2, 1, 1], [1, 2, 1, 2], [1, 2, 2, 0], [1, 2, 2, 1], [1, 2, 2, 2], [2, 0, 0, 0], [2, 0, 0, 1], [2, 0, 0, 2], [2, 0, 1, 0], [2, 0, 1, 1],
 [2, 0, 1, 2], [2, 0, 2, 0], [2, 0, 2, 1], [2, 0, 2, 2], [2, 1, 0, 0], [2, 1, 0, 1], [2, 1, 0, 2], [2, 1, 1, 0], [2, 1, 1, 1], [2, 1, 1, 2], [2, 1, 2, 0], [2, 1, 2, 1], 
 [2, 1, 2, 2], [2, 2, 0, 0], [2, 2, 0, 1], [2, 2, 0, 2], [2, 2, 1, 0], [2, 2, 1, 1], [2, 2, 1, 2], [2, 2, 2, 0], [2, 2, 2, 1], [2, 2, 2, 2]])

#For Hadamard code, Z3 will be used to encode the list of 81 ternary bits with the below matrix [[H H],[H -H]]
# This start_matrix will be converted into hadamard code by using Kronecker product (np.kron)

start_matrix = np.array([[1,1],[1,-1]])

def hadamard_matrix(hamatrix, k):
    n = 2**k
    if n == 1:
        return np.array([1])
    elif n == 2:
        return np.array(hamatrix)
    else: 
        b = np.kron(hamatrix, hadamard_matrix(hamatrix,k-1))
        return b

def hadamard_encoding(list_4bits,gen_matrix):
    (num,dim) = np.array(list_4bits).shape
    (num2, dim2) = gen_matrix.shape
    codewords = np.zeros([num,num2])
    for i in range(len(list_4bits)):
        codewords[i] = np.array(np.matmul(list_4bits[i],gen_matrix.T)%3)
    return codewords.astype(int)

# Function used to corrupt the codewords

def corrupt_ternary(codewords, p):
    new_ternary = []
    for j in codewords:
        new_byte = []
        for n in j:
            if uniform(0,1) < p: 
                new_byte.append((n+1)%3)
            else: 
                new_byte.append((n-1)%3)
        new_ternary.append(new_byte)
    return np.array(new_ternary)

def hamming_dist(input1,input2):
    dist = []
    for i in range(len(input2)):
        ham_dist = abs(input1 - input2[i])
        dist.append(np.sum(ham_dist))
    return dist

def hadamard_decoding(codewords,p):
    corpt_codewords = corrupt_ternary(codewords,p)
    dist = []
    min_indexes = []
    for i in range(len(corpt_codewords)):
        x = corpt_codewords[i]
        dist.append(hamming_dist(x,codewords))
        min_indexes.append(np.argmin(dist[i]))
    new_codewords = np.array(codewords[[i for i in min_indexes]])
    
    return new_codewords


##Hadamard code with n = 2:
ha_matrix = hadamard_matrix(start_matrix,2)

# We expand the hadamard matrix by taking another Knonecker product of hadamard matrix with matrix [[1],[-1]]
# Its shape will be (8,4) while hadamard matrix's shape is (4,4) 

expand_matrix = np.kron(np.array([[1],[-1]]),ha_matrix)

codewords = hadamard_encoding(tern_list,expand_matrix)
